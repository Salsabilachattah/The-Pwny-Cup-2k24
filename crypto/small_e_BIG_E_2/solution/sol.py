from Crypto.Util.number import getPrime, inverse, long_to_bytes , bytes_to_long
from random import getrandbits
from math import gcd
# first part of the flag
n =  29563270538086143002493713133242710911277389545174171979360937022260711548809566754991339099758796679985706321613966054969681887602589884648623825745668458837445834185193063630643954030023995152766828380984307286631613409521218198097771181078259717332328406870138980135857993307521984208658806489755339470589276028922666975676812812740253581012003167633689981369923875040409212617867191091682882027502513562593887237579479288835315968446747373849118802138237014138387111862922509374362634591599247863144915827599828073015706407992838346248443950397896330971520858172678181332976146233287226738376984007092092777160231
e =  16
c =  10858541195308715144166660034250554587839442817215103488562366650892066617385911705060729091239110702901641721250143902855824912961593409849086522004705402359663460818112822849183317024175658557832539557995189037564264861591374415480242602387565161587454983971616566019043649080241934265895840842604899768513282259102889652528500517412740774861977513480723509810797420121739582246506728235019389082284739384568112355004105348680787356507177573645215782049119291542980955639754262123765379779499258567428967570514953947042071405312130633900019143997749997940498076765446303629609408046007432273694203177327435310454854
def legendre(a, p):
    return pow(a, (p - 1) // 2, p)

# return the modular square root if exists
def tonelli(n, p):
    assert legendre(n, p) == 1, "not a square (mod p)"
    q = p - 1
    s = 0
    while q % 2 == 0:
        q //= 2
        s += 1
    if s == 1:
        return pow(n, (p + 1) // 4, p)
    for z in range(2, p):
        if p - 1 == legendre(z, p):
            break
    c = pow(z, q, p)
    r = pow(n, (q + 1) // 2, p)
    t = pow(n, q, p)
    m = s
    t2 = 0
    while (t - 1) % p != 0:
        t2 = (t * t) % p
        for i in range(1, m):
            if (t2 - 1) % p == 0:
                break
            t2 = (t2 * t2) % p
        b = pow(c, 1 << (m - i - 1), p)
        r = (r * b) % p
        c = (b * b) % p
        t = (t * c) % p
        m = i
    return r

for i in range(32):
    b = list(bin(i)[2:])
    k = c
    for j in range(len(b)):
        if b[j] == "0":
            b[j] = "-1"
        # since not all the numbers are quadraric residus some cases may raise an exception
        try:
            k = (int(b[j])*tonelli(k,n))%n
        except:
            pass
    possible_flag = long_to_bytes(k)
    if b'shellmates' in possible_flag:
        print(possible_flag)
        m=possible_flag
        break
# second part of the flag
N = 0xb9eefe9302fa1a4e6aa43980fac2b7d1b66a7586b9263b3091510a44a301d45f43315744eb7d1ec81a8bf1bae5aaa80099d728d67ca886010087ae39fdb64efa2bd547d99cf60af3978a1bb968ba261830700b6b92c5c738b381f36c2a2a809c02d12dae4fc830056194b673265266fc1492b1820df61344c310cda3fc79805b20c4afc937fe8f25598f8e81f6f1484d105c029eafe7433d0f72729ce4b3abd0226ced14cb008df97a06ca6becd995373783d517b1909e473d0b5e3de0b3f5f9ad2a0b6b7f0ee3fb7a8d584d3badf7518fff17b2db230d836c541e106b55a0822b6ff771123b3aa65b2066d9d4785c7781a9700b4c46679a525896c9e318f2e1      
E = 0x3f37fc9f480f6fdee4f1ffb3fffdb1653d9ebd38f972873b0efa6a6bfb4702fc6380a53717d4231846382b7b869a9b42ec1306ff5946160c4af122d5c8b7b2fb241af29bb65b30627493abc6363d8506be21c6e4a4d925f26cab72379b0bc565edf9a40ebe331f3745bc40901f1e3ddbd685954c7c4d9d8d7079d86608a839afa1cf4a1b4155da38f3405788a43d5b5c4e25aaf6c5a423707b0e2f9e5924b8c7c1ab384f94140e15d37ff3b59f73c821358f8d5e208d5a1d7addd95f97f1050985401113855124a4fea95a9c9521a5bab6576c31505568dda8b23d0886dfefa796b361453ee2628193d9992b697705e0f8792513e706de3fff8a36d6b0b45a43      
C = 0x5d70e965bbfbb6b30511210da584bacc5c0d89fe8a702257ed4865d8fc0bed85c91e0d1a72319f0511621e79f562e407589ab0742b10fd2f1019250ee33263cccb56fb2c8c37390d3c7b2ffe94d51e54d902ccd87960a99d3edb85eac802923e2bbf7ecce6ce43c9fccc520ab6814887325f813decdcb3c3a3f8c1d6af37fb3f8235a12050952767c488d48173f1d50a4dd3b9cd194c262cd215cbbc93c142fa394ea9ade0a0369a76240c641414428e75c452bc69efd657fc25d55efe0d206efd8cedd4740934f977647558301bec9462754c34814aa326c3b3e2f96c9343e5a85a374906f09e40558753ef210d414dcb4a664a6fddfd18102824322a41740c
#Sage script : https://raw.githubusercontent.com/mimoo/RSA-and-LLL-attacks/master/boneh_durfee.sage
D=11650891345453943727598406279395725300050995303635966436883350784962473007889485578766893375944376811221339287790962917345696118912157761051645885903888591
M=long_to_bytes(pow(C,D,N))
print(M)
print(m+M)